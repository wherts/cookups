Recipe Ingredient Compiling Pseudocode
Input: A set of all the people at the party
Output: A set of all ingredients of all people at the party

numPeople = int representing number of people in dinner party (party.size)
currIngredients = map<ingredient, amount>

for person in party:
	for ingredients in person:
		for ingredient in ingredients:
			if ingredient in currIngredients:
				currIngredients.updateAmount(ingredient)
			else:
				currIngredients.put(ingredient, amount)

___________________________________________________________


Recipe Matching Pseudocode
Input: A set of all ingredients
Output: A set of recipes that the person(s) can cook

numPeople = int representing number of people in dinner party (party.size)
currIngredients = map<ingredient, amount> 

for ingredient in currIngredients:
	build up query string -> SELECT * FROM recipes WHERE ingredient=ingredient OR ... OR...ingredient(n)

recipes = compile list of recipes from database with any of currIngredients

for recipe in recipes:
	recipe = recipe.scale(numPeople)

	// calculate recipe "potential"
	for ingredient in recipe:
		if ingredient in currIngredients:
			recipe.addOwned(ingredient, amount)
			if (amount < amountNeeded):
				recipe.addBuy(amountNeeded - amount)
		else:
			recipe.addBuy(ingredient, amountNeeded)
return recipes

___________________________________________________________


Date Matching Pseudocode
Input: toFind {
			orientation
	   		gender
	   		romantic (boolean) 
	   	}
	   	potentialMatches - list of all people who want to "cookup"
Output: A sorted list of people that match preferences

results = PriorityQueue<person, rank>
if romantic:
	for person in potentialMatches:
		compatibility = measureCompatibility(person, toFind)
		if compatibility > threshhold:
			results.add(person, compatability / tasteDistance)
else:
	for person in potentialMatches:
		results.add(person, distance(person, toFind) / tasteDistance)

return results

___________________________________________________________


Compatability Pseudocode
Input: toMatch {
			orientation {
				gay
				bi
				straight
			}
	   		gender (float)
	   		romantic (boolean) 
	   	}
	   	person {
			orientation
	   		gender
	   		romantic (boolean) 
	   	}
if (!toMatch.romantic or !person.romantic) {
	return 0
}

switch toMatch.orientation:
	case queer:
		switch person.orientation:
			if queer:
			if gay:
			if bi:

	case gay:

	case bi:

	case straight:
if toMatch.orientation == queer {
	return person.howAttractedTo(toFind)
}


